# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# prebuilt docker images with toolchain
executors:
  setup-rv64gc:
    docker:
      - image: keystoneenclaveorg/keystone:init-rv64gc
  setup-rv32gc:
    docker:
      - image: keystoneenclaveorg/keystone:init-rv32gc


commands:
  build-script:
    parameters:
      build-name:
        type: string
      build-dir:
        type: string
      build-args:
        type: string
    steps:
      - run:
          name: "Generate script for << parameters.build-name >>"
          command: |
            sed -e 's|__BUILD_DIR__|<< parameters.build-dir >>|g' \
                -e 's|__BUILD_ARGS__|<< parameters.build-args >>|g' \
                -e 's|__BRANCH__|$CIRCLE_BRANCH|g' \
                .circleci/test-template.sh > << parameters.build-name>>.sh
            chmod +x << parameters.build-name >>.sh
  
  
  ######################
  ## General commands ##
  ######################

  update-riscv-toolchain-path-64:
    steps:
      - run: echo 'export PATH=/keystone/riscv64/bin:$PATH' >> $BASH_ENV
  update-riscv-toolchain-path-32:
    steps:
      - run: echo 'export PATH=/keystone/riscv32/bin:$PATH' >> $BASH_ENV

jobs:
  run-docker-image:
    parameters:
      dockerfile:
        type: string
      tag:
        type: string
      runtime-build-name:
        type: string
        default: ""
      runtime-build-dir:
        type: string
        default: ""
      runtime-build-args:
        type: string
        default: ""
    docker:
      - image: "cimg/base:2022.09"
    working_directory: "~/project/keystone"
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - build-script:
          build-name: << parameters.runtime-build-name >>
          build-dir: << parameters.runtime-build-dir >>
          build-args: << parameters.runtime-build-args >>
      - run:
          name: "Build Docker image (<< parameters.tag >>) and run"
          command: |
            cd "docker"

            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              tag="<< parameters.tag >>"

              docker build \
                -t $tag \
                --build-arg CHECKOUT=$CIRCLE_BRANCH \
                . \
                --platform linux/x86_64 \
                -f << parameters.dockerfile >>
            else
              tag="keystoneenclaveorg/keystone:<< parameters.tag >>"


              if [ "$CIRCLE_BRANCH == "master" ]; then
                echo "$DOCKER_ACCESS_TOKEN" | \
                  docker login -u "$DOCKER_USERNAME" --password-stdin
                docker push $tag
              fi

              docker pull $tag
            fi

            if [ -n "<< parameters.runtime-build-name >>" ]; then
              docker run -v $(pwd):/scripts $tag bash -c "/scripts/<< parameters.runtime-build-name>>.sh"
            else
              docker run $tag
            fi
  
  update-dockerhub-image:
    parameters:
      dockerfile:
        type: string
      tag:
        type: string
    docker:
      - image: "cimg/base:2022.09"
    working_directory: "~/project/keystone"
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: "Build and push Docker image (<< parameters.tag >>)"
          command: |
            cd "docker"
            echo "$DOCKER_ACCESS_TOKEN" | \
              docker login -u "$DOCKER_USERNAME" --password-stdin
            docker build \
              -t keystoneenclaveorg/keystone:<< parameters.tag >> \
              --build-arg CHECKOUT=master \
              . \
              --platform linux/x86_64 \
              -f << parameters.dockerfile >>
            docker push keystoneenclaveorg/keystone:<< parameters.tag >>

  ######################
  ## Full stack tests ##
  ######################

  build-and-test-rv64-qemu:
    executor: setup-rv64gc
    working_directory: /keystone
    steps:
      - checkout
      - update-riscv-toolchain-path-64
      - run:
          name: "Build rv64 and run tests"
          command: |
              source ./source.sh
              ./fast-setup.sh
              mkdir build64
              cd build64
              cmake /keystone
              make -j$(nproc)
              make run-tests
          no_output_timeout: 120m
  build-rv64-fu540:
    executor: setup-rv64gc
    working_directory: /keystone
    steps:
      - checkout
      - update-riscv-toolchain-path-64
      - run:
          name: "Build rv64 sifive FU540"
          command: |
              source ./source.sh
              ./fast-setup.sh
              mkdir build64-fu540
              cd build64-fu540
              cmake /keystone -DLINUX_SIFIVE=y -DSM_PLATFORM=sifive/fu540
              make -j$(nproc)
  build-and-test-rv32-qemu:
    executor: setup-rv32gc
    working_directory: /keystone
    steps:
      - checkout
      - update-riscv-toolchain-path-32
      - run:
          name: "Build rv32 and run tests"
          command: |
              source ./source.sh
              BITS=32 ./fast-setup.sh
              mkdir build32
              cd build32
              cmake /keystone -DRISCV32=y
              make -j$(nproc)
              make run-tests
          no_output_timeout: 120m

  ###################
  ## Runtime tests ##
  ###################

  # The format job essentially runs clang-format against the Eyrie codebase. To
  # do so, we first query which clang-format git prefers. Then, we run git with
  # this clang-format. This ensures that the tool only checks files that have
  # been modified. Finally, we check the output of the tool and return an error
  # if some formatting changes are necessary.

  format:
    executor: setup-rv64gc
    steps:
      - checkout
      - update-riscv-toolchain-path-64
      - run: apt-get install clang-format -y
      - run:
          name: "test"
          environment:
            KEYSTONE_SDK_DIR: /keystone/sdk/build
          command: |
              FORMAT=$(git help -a | grep clang-format | tail -n1)
              FORMAT_RESULT=$(git $FORMAT)
              [ "$FORMAT_RESULT" = "no modified files to format" ] || [ "$FORMAT_RESULT" = "clang-format did not modify any files" ]
          no_output_timeout: 120m
  default-build:
    executor: setup-rv64gc
    steps:
      - checkout
      - update-riscv-toolchain-path-64
      - build-sdk
      - build-runtime:
          build-name: "Default build"
  use-freemem:
    executor: setup-rv64gc
    steps:
      - checkout
      - update-riscv-toolchain-path-64
      - build-sdk
      - build-runtime:
          build-name: "USE_FREEMEM"
          build-dir: build_freemem
          build-args: -DFREEMEM=on
  use_linux_syscall_use_freemem:
    executor: setup-rv64gc
    steps:
      - checkout
      - update-riscv-toolchain-path-64
      - build-sdk
      - build-runtime:
          build-name: "USE_LINUX_SYSCALL + USE_FREEMEM"
          build-dir: build_syscall_freemem
          build-args: -DLINUX_SYSCALL=on -DFREEMEM=on
  use_paging:
    executor: setup-rv64gc
    steps:
      - checkout
      - update-riscv-toolchain-path-64
      - build-sdk
      - build-runtime:
          build-name: "USE_PAGING"
          build-dir: build_paging
          build-args: -DFREEMEM=on -DPAGING=on
  use_package_crypto:
    executor: setup-rv64gc
    steps:
      - checkout
      - update-riscv-toolchain-path-64
      - build-sdk
      - build-runtime:
          build-name: "USE_PAGE_CRYPTO"
          build-dir: build_paging_crypto
          build-args: -DFREEMEM=on -DPAGING=on -DPAGE_CRYPTO=on
  use_page_hash:
    executor: setup-rv64gc
    steps:
      - checkout
      - update-riscv-toolchain-path-64
      - build-sdk
      - build-runtime:
          build-name: "USE_PAGE_HASH"
          build-dir: build_paging_hash
          build-args: -DFREEMEM=on -DPAGING=on -DPAGE_HASH=on
  use_page_crypto_use_page_hash:
    executor: setup-rv64gc
    steps:
      - checkout
      - update-riscv-toolchain-path-64
      - build-sdk
      - build-runtime:
          build-name: "USE_PAGE_CRYPTO + USE_PAGE_HASH"
          build-dir: build_paging_crypto_hash
          build-args: -DFREEMEM=on -DPAGING=on -DPAGE_CRYPTO=on -DPAGE_HASH=on
  test:
    executor: setup-rv64gc
    steps:
      - checkout
      - update-riscv-toolchain-path-64
      - build-sdk
      - run:
          name: "test"
          environment:
            KEYSTONE_SDK_DIR: /keystone/sdk/build
          command: |
              cd runtime
              git submodule sync
              git submodule update --init ./test/cmocka
              mkdir -p obj/test
              pushd obj/test
              cmake ../../test
              make
              ctest -VV || ( cat obj/test/Testing/Temporary/LastTest.log && false )
              popd
          no_output_timeout: 120m

workflows:
  # Test
  use-page-hash:
    jobs:
      - run-docker-image:
          dockerfile: Dockerfile.nobuild
          tag: "init-rv64gc"
          runtime-build-name: "USE_PAGE_HASH"
          runtime-build-dir: "build_paging_hash"
          runtime-build-args: "-DFREEMEM=on -DPAGING=on -DPAGE_HASH=on"
